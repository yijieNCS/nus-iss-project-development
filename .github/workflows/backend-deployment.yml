name: Build and Deploy Backend Docker Images

# on:
#   pull_request:
#     branches:
#       - main
#
on: [push]

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Check out repository
              uses: actions/checkout@v2
            
            - name: Set up Node.js
              uses: actions/setup-node@v2
              with:
                node-version: '20.11.0'

            - name: Create .env file
              run: |
                echo "MYSQL_HOST=${{ secrets.MYSQL_HOST }}"> backend/.env
                echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> backend/.env
                echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> backend/.env
                echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> backend/.env
                echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> backend/.env
                echo "JWT_SECRET"="" >> backend/.env
            
            - name: Login to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PAT}}
            
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build and Push Docker Image
              uses: docker/build-push-action@v5
              with:
                context: ./backend
                file: ./backend/Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/sg_learner_server:latest

            - name: SSH into EC2 Deployment
              uses: appleboy/ssh-action@master
              with:
                host: ${{ secrets.EC2_HOST }}
                username: ${{ secrets.EC2_USERNAME }}
                key: ${{ secrets.EC2_PRIVATE_KEY }}
                script: |
                  docker pull ${{ secrets.DOCKER_USERNAME }}/sg_learner_server:latest
                  docker stop sg_learner_server || true
                  docker rm sg_learner_server ||true
                  docker run -d --name sg_learner_server -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/sg_learner_server:latest
                  docker image prune -a --force


            